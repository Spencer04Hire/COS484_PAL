{"input": "repeat with logic:\nRepeat 5 times hello world", "target": "hello world hello world hello world hello world hello world", "answer": "hello world hello world hello world hello world hello world", "score": 1, "generation": ["(* Q: Repeat 5 times hello world *)\nlet result = Buffer.create 100 in\nfor _ = 1 to 5 do\n  Buffer.add_string result \"hello world \";\ndone;\nprint_string (Buffer.contents result)"]}
{"input": "repeat with logic:\nrepeat the word cat four times. After the second time, also say the word meow.", "target": "cat cat meow cat cat", "answer": "cat cat meow cat cat", "score": 1, "generation": ["(* Q: repeat with logic: repeat the word cat four times. After the second time, also say the word meow. *)\nlet result = Buffer.create 100 in\nfor i = 1 to 4 do\n  Buffer.add_string result \"cat \";\n  if i = 2 then Buffer.add_string result \"meow \";\ndone;\nprint_string (Buffer.contents result)"]}
{"input": "repeat with logic:\nRepeat the word dog four times, but halfway through also say woof", "target": "dog dog woof dog dog", "answer": "dog dog woof dog dog", "score": 1, "generation": ["(* Q: Repeat the word dog four times, but halfway through also say woof *)\nlet result = Buffer.create 100 in\nfor i = 1 to 4 do\n  Buffer.add_string result \"dog \";\n  if i = 2 then Buffer.add_string result \"woof \";\ndone;\nprint_string (Buffer.contents result)"]}
{"input": "repeat with logic:\nRepeat all the world seven times, and after every second time add is a stage.", "target": "all the world all the world is a stage all the world all the world is a stage all the world all the world is a stage all the world", "answer": "world world is a stage world world is a stage world world is a stage world", "score": 0, "generation": ["(* Q: Repeat all the world seven times, and after every second time add is a stage. *)\nlet result = Buffer.create 100 in\nfor i = 1 to 7 do\n  Buffer.add_string result \"world \";\n  if i mod 2 = 0 then Buffer.add_string result \"is a stage \";\ndone;\nprint_string (Buffer.contents result)"]}
{"input": "repeat with logic:\nSay hungry three times, then hippo two times, then feed me four times", "target": "hungry hungry hungry hippo hippo feed me feed me feed me feed me", "answer": "hungry hungry hungry hippo hippo feed me feed me feed me feed me", "score": 1, "generation": ["(* Q: repeat with logic: Say hungry three times, then hippo two times, then feed me four times *)\nlet result = Buffer.create 100 in\nfor _ = 1 to 3 do\n  Buffer.add_string result \"hungry \";\ndone;\nfor _ = 1 to 2 do\n  Buffer.add_string result \"hippo \";\ndone;\nfor _ = 1 to 4 do\n  Buffer.add_string result \"feed me \";\ndone;\nprint_string (Buffer.contents result)"]}
{"input": "repeat with logic:\nsay python twice and data once, and then repeat all of this three times.", "target": "python python data python python data python python data", "answer": "python python data python python data python python data", "score": 1, "generation": ["(* Q: repeat with logic: say python twice and data once, and then repeat all of this three times. *)\nlet tmp = [\"python\"; \"python\"; \"data\"] in\nlet result = Buffer.create 100 in\nfor _ = 1 to 3 do\n  List.iter (fun s -> Buffer.add_string result s; Buffer.add_string result \" \") tmp;\ndone;\nprint_string (Buffer.contents result)"]}
{"input": "repeat with logic:\nPrint logic eleven times, but after the 3rd and 8th also say true", "target": "logic logic logic true logic logic logic logic logic true logic logic logic", "answer": "logic logic logic true logic logic logic logic logic true logic logic logic", "score": 1, "generation": ["(* Q: Print logic eleven times, but after the 3rd and 8th also say true *)\nlet result = Buffer.create 100 in\nfor i = 1 to 11 do\n  Buffer.add_string result \"logic \";\n  if i = 3 || i = 8 then Buffer.add_string result \"true \"\ndone;\nprint_string (Buffer.contents result)"]}
{"input": "repeat with logic:\nRepeat squiggly line twice after the phrase can you draw", "target": "can you draw squiggly line squiggly line", "answer": "can you draw squiggly line squiggly line", "score": 1, "generation": ["(* Q: Repeat squiggly line twice after the phrase can you draw *)\nlet result = Buffer.create 100 in\nBuffer.add_string result \"can you draw \";\nfor _ = 1 to 2 do\n  Buffer.add_string result \"squiggly line \";\ndone;\nprint_string (Buffer.contents result)"]}
{"input": "repeat with logic:\nRepeat cat five times. After each time, also say mouse", "target": "cat mouse cat mouse cat mouse cat mouse cat mouse", "answer": "cat mouse cat mouse cat mouse cat mouse cat mouse", "score": 1, "generation": ["(* Q: Repeat cat five times. After each time, also say mouse *)\nlet result = Buffer.create 100 in\nfor _ = 1 to 5 do\n  Buffer.add_string result \"cat \";\n  Buffer.add_string result \"mouse \";\ndone;\nprint_string (Buffer.contents result)"]}
{"input": "repeat with logic:\nrepeat whole note quarter note quarter note quarter note twice", "target": "whole note quarter note quarter note quarter note whole note quarter note quarter note quarter note", "answer": "whole note quarter note quarter note quarter note whole note quarter note quarter note quarter note", "score": 1, "generation": ["```ocaml\n(* Q: repeat with logic: repeat whole note quarter note quarter note quarter note twice *)\nlet result = Buffer.create 100 in\nfor _ = 1 to 2 do\n  Buffer.add_string result \"whole note \";\n  Buffer.add_string result \"quarter note \";\n  Buffer.add_string result \"quarter note \";\n  Buffer.add_string result \"quarter note \";\ndone;\nprint_string (Buffer.contents result)\n```"]}
{"input": "repeat with logic:\noutput if you teach a person to fish you will three times", "target": "if you teach a person to fish you will if you teach a person to fish you will if you teach a person to fish you will", "answer": "if you teach a person to fish you will if you teach a person to fish you will if you teach a person to fish you will", "score": 1, "generation": ["(* Q: repeat with logic: output if you teach a person to fish you will three times *)\nlet result = Buffer.create 100 in\nfor _ = 1 to 3 do\n  Buffer.add_string result \"if you teach a person to fish you will \";\ndone;\nprint_string (Buffer.contents result)"]}
{"input": "repeat with logic:\nOutput carbon pricing is an four times, but in the middle also say interesting concept", "target": "carbon pricing is an carbon pricing is an interesting concept carbon pricing is an carbon pricing is an", "answer": "carbon pricing is an carbon pricing is an interesting concept carbon pricing is an carbon pricing is an", "score": 1, "generation": ["(* Q: Output carbon pricing is an four times, but in the middle also say interesting concept *)\nlet result = Buffer.create 100 in\nfor i = 1 to 4 do\n  Buffer.add_string result \"carbon pricing is an \";\n  if i = 2 then Buffer.add_string result \"interesting concept \";\ndone;\nprint_string (Buffer.contents result)"]}
{"input": "repeat with logic:\nSeven times please repeat The School of Music", "target": "The School of Music The School of Music The School of Music The School of Music The School of Music The School of Music The School of Music", "answer": "The School of Music The School of Music The School of Music The School of Music The School of Music The School of Music The School of Music", "score": 1, "generation": ["(* Q: repeat with logic: Seven times please repeat The School of Music *)\nlet result = Buffer.create 100 in\nfor _ = 1 to 7 do\n  Buffer.add_string result \"The School of Music \";\ndone;\nprint_string (Buffer.contents result)"]}
{"input": "repeat with logic:\nTwice repeat inhabitants in the urban area and then three times live in walking distance", "target": "inhabitants in the urban area inhabitants in the urban area live in walking distance live in walking distance live in walking distance", "answer": "inhabitants in the urban area inhabitants in the urban area live in walking distance live in walking distance live in walking distance", "score": 1, "generation": ["(* Q: repeat with logic: Twice repeat inhabitants in the urban area and then three times live in walking distance *)\nlet result = Buffer.create 100 in\nfor _ = 1 to 2 do\n  Buffer.add_string result \"inhabitants in the urban area \";\ndone;\nfor _ = 1 to 3 do\n  Buffer.add_string result \"live in walking distance \";\ndone;\nprint_string (Buffer.contents result)"]}
{"input": "repeat with logic:\nRepeat historic church building twice, but after every word also say wow", "target": "historic wow church wow building wow historic wow church wow building wow", "answer": "historic wow church wow building wow historic wow church wow building wow", "score": 1, "generation": ["(* Q: Repeat historic church building twice, but after every word also say wow *)\nlet result = Buffer.create 100 in\nlet words = [\"historic\"; \"church\"; \"building\"] in\nfor _ = 1 to 2 do\n  List.iter (fun s -> Buffer.add_string result (s ^ \" \"); Buffer.add_string result \"wow \") words;\ndone;\nprint_string (Buffer.contents result)"]}
{"input": "repeat with logic:\nrepeat election to the council three times, but after every other word say cool", "target": "election to cool the council cool election to cool the council cool election to cool the council cool", "answer": "election cool to cool the cool council election cool to cool the cool council election cool to cool the cool council", "score": 0, "generation": ["(* Q: repeat with logic: repeat election to the council three times, but after every other word say cool *)\nlet result = Buffer.create 100 in\nfor i = 1 to 3 do\n  Buffer.add_string result \"election \";\n  Buffer.add_string result \"cool \";\n  Buffer.add_string result \"to \";\n  Buffer.add_string result \"cool \";\n  Buffer.add_string result \"the \";\n  Buffer.add_string result \"cool \";\n  Buffer.add_string result \"council \";\ndone;\nprint_string (Buffer.contents result)"]}
{"input": "repeat with logic:\nrepeat the phrase the administrative district three times, and say the phrase hello world after the second time", "target": "the administrative district the administrative district hello world the administrative district", "answer": "the administrative district the administrative district hello world the administrative district", "score": 1, "generation": ["(* Q: repeat with logic: repeat the phrase the administrative district three times, and say the phrase hello world after the second time *)\nlet result = Buffer.create 100 in\nfor i = 1 to 3 do\n  Buffer.add_string result \"the administrative district \";\n  if i = 2 then Buffer.add_string result \"hello world \";\ndone;\nprint_string (Buffer.contents result)"]}
{"input": "repeat with logic:\nsay the village has a population five times, and after odd times add larger than California", "target": "the village has a population larger than California the village has a population the village has a population larger than California the village has a population the village has a population larger than California", "answer": "the village has a population larger than California the village has a population the village has a population larger than California the village has a population the village has a population larger than California", "score": 1, "generation": ["(* Q: repeat with logic: say the village has a population five times, and after odd times add larger than California *)\nlet result = Buffer.create 100 in\nfor i = 1 to 5 do\n  Buffer.add_string result \"the village has a population \";\n  if i mod 2 = 1 then Buffer.add_string result \"larger than California \";\ndone;\nprint_string (Buffer.contents result)"]}
{"input": "repeat with logic:\nask a genus of plants in what family? four times. after the fourth time say The happy family", "target": "a genus of plants in what family? a genus of plants in what family? a genus of plants in what family? a genus of plants in what family? The happy family", "answer": "a genus of plants in what family? a genus of plants in what family? a genus of plants in what family? a genus of plants in what family? The happy family", "score": 1, "generation": ["(* Q: repeat with logic: ask a genus of plants in what family? four times. after the fourth time say The happy family *)\nlet result = Buffer.create 100 in\nfor _ = 1 to 4 do\n  Buffer.add_string result \"a genus of plants in what family? \"\ndone;\nBuffer.add_string result \"The happy family\";\nprint_string (Buffer.contents result)"]}
{"input": "repeat with logic:\nsay fish are healthy twice", "target": "fish are healthy fish are healthy", "answer": "fish are healthy fish are healthy", "score": 1, "generation": ["(* Q: repeat with logic: say fish are healthy twice *)\nlet result = Buffer.create 100 in\nlet tmp = [\"fish are healthy\"; \"fish are healthy\"] in\nList.iter (fun s -> Buffer.add_string result s; Buffer.add_string result \" \") tmp;\nprint_string (Buffer.contents result)"]}
{"input": "repeat with logic:\nThree times please repeat The School of Music, and before the first time say Who plays the bass loud?", "target": "Who plays the bass loud? The School of Music The School of Music The School of Music", "answer": "Who plays the bass loud? The School of Music The School of Music The School of Music", "score": 1, "generation": ["(* Q: Three times please repeat The School of Music, and before the first time say Who plays the bass loud? *)\nlet result = Buffer.create 100 in\nBuffer.add_string result \"Who plays the bass loud? \";\nfor _ = 1 to 3 do\n  Buffer.add_string result \"The School of Music \";\ndone;\nprint_string (Buffer.contents result)"]}
{"input": "repeat with logic:\nRepeat cheese seven times; every third say whiz", "target": "cheese cheese cheese whiz cheese cheese cheese whiz cheese", "answer": "cheese cheese cheese whiz cheese cheese cheese whiz cheese", "score": 1, "generation": ["(* Q: Repeat cheese seven times; every third say whiz *)\nlet result = Buffer.create 100 in\nfor i = 1 to 7 do\n  Buffer.add_string result \"cheese \";\n  if i mod 3 = 0 then Buffer.add_string result \"whiz \";\ndone;\nprint_string (Buffer.contents result)"]}
{"input": "repeat with logic:\nsay hello world five times, but don't say world every even time", "target": "hello world hello hello world hello hello world", "answer": "hello world hello hello world hello hello world", "score": 1, "generation": ["(* Q: say hello world five times, but don't say world every even time *)\nlet result = Buffer.create 100 in\nfor i = 1 to 5 do\n  Buffer.add_string result \"hello \";\n  if i mod 2 <> 0 then Buffer.add_string result \"world \";\ndone;\nprint_string (Buffer.contents result)"]}
{"input": "repeat with logic:\nsay all work and no play makes three times, but every even time add Jack and odd time add Jill", "target": "all work and no play makes Jill all work and no play makes Jack all work and no play makes Jill", "answer": "all work and no play makes Jill all work and no play makes Jack all work and no play makes Jill", "score": 1, "generation": ["(* Q: repeat with logic: say all work and no play makes three times, but every even time add Jack and odd time add Jill *)\nlet result = Buffer.create 100 in\nfor i = 1 to 3 do\n  Buffer.add_string result \"all work and no play makes \";\n  if i mod 2 = 0 then Buffer.add_string result \"Jack \" else Buffer.add_string result \"Jill \";\ndone;\nprint_string (Buffer.contents result)"]}
{"input": "repeat with logic:\nrepeat a woodchuck chucks lots of wood two times, but replace lots with five pounds the first time and two tons the second time", "target": "a woodchuck chucks five pounds of wood a woodchuck chucks two tons of wood", "answer": "a woodchuck chucks five pounds of wood a woodchuck chucks two tons of wood", "score": 1, "generation": ["(* Q: repeat with logic: repeat a woodchuck chucks lots of wood two times, but replace lots with five pounds the first time and two tons the second time *)\nlet result = Buffer.create 100 in\nfor i = 1 to 2 do\n  Buffer.add_string result \"a woodchuck chucks \";\n  if i = 1 then Buffer.add_string result \"five pounds \";\n  if i = 2 then Buffer.add_string result \"two tons \";\n  Buffer.add_string result \"of wood \";\ndone;\nprint_string (Buffer.contents result)"]}
{"input": "repeat with logic:\nsay pickup a pound of green beans twice, replacing a pound with a bunch for even times and a handful for odd", "target": "pickup a handful of green beans pickup a bunch of green beans", "answer": "pickup a handful of green beans pickup a bunch of green beans", "score": 1, "generation": ["(* Q: repeat with logic: say pickup a pound of green beans twice, replacing a pound with a bunch for even times and a handful for odd *)\nlet result = Buffer.create 100 in\nfor i = 1 to 2 do\n  let quantity = if i mod 2 = 0 then \"a bunch\" else \"a handful\" in\n  Buffer.add_string result (\"pickup \" ^ quantity ^ \" of green beans \");\ndone;\nprint_string (Buffer.contents result)"]}
{"input": "repeat with logic:\nA watermelon has seven seeds. Repeat they're delicious once for every seed", "target": "they're delicious they're delicious they're delicious they're delicious they're delicious they're delicious they're delicious", "answer": "A watermelon has seven seeds. they're delicious they're delicious they're delicious they're delicious they're delicious they're delicious they're delicious", "score": 0, "generation": ["(* Q: repeat with logic: A watermelon has seven seeds. Repeat they're delicious once for every seed *)\nlet seeds = 7 in\nlet result = Buffer.create 100 in\nBuffer.add_string result \"A watermelon has seven seeds. \";\nfor _ = 1 to seeds do\n  Buffer.add_string result \"they're delicious \";\ndone;\nprint_string (Buffer.contents result)"]}
{"input": "repeat with logic:\nA strawberry has three leaves. Say wish I had some chocolate for every odd leaf", "target": "wish I had some chocolate wish I had some chocolate", "answer": "A strawberry has three leaves. wish I had some chocolate A strawberry has three leaves. A strawberry has three leaves. wish I had some chocolate", "score": 0, "generation": ["(* Q: repeat with logic: A strawberry has three leaves. Say wish I had some chocolate for every odd leaf *)\nlet result = Buffer.create 100 in\nfor i = 1 to 3 do\n  Buffer.add_string result \"A strawberry has three leaves. \";\n  if i mod 2 = 1 then Buffer.add_string result \"wish I had some chocolate \";\ndone;\nprint_string (Buffer.contents result)"]}
{"input": "repeat with logic:\nSay the letters of the alphabet in capital letters, but only the odd ones", "target": "A C E G I K M O Q S U W Y", "answer": "ACEGIKMOQSUWY", "score": 0, "generation": ["(* Q: Say the letters of the alphabet in capital letters, but only the odd ones *)\nlet result = Buffer.create 100 in\nfor i = 1 to 26 do\n  if i mod 2 = 1 then\n    Buffer.add_string result (String.make 1 (char_of_int (i + 64))) \ndone;\nprint_string (Buffer.contents result)"]}
{"input": "repeat with logic:\nRepeat the phrase all cars eat gas four times. On the odd times, drop words that start with vowels", "target": "cars gas all cars eat gas cars gas all cars eat gas", "answer": "cars gas all cars eat gas cars gas all cars eat gas", "score": 1, "generation": ["(* Q: Repeat the phrase all cars eat gas four times. On the odd times, drop words that start with vowels *)\nlet result = Buffer.create 100 in\nlet phrase = [\"all\"; \"cars\"; \"eat\"; \"gas\"] in\nfor i = 1 to 4 do\n  if i mod 2 = 1 then\n    List.iter (fun s -> if s.[0] <> 'a' && s.[0] <> 'e' then Buffer.add_string result (s ^ \" \")) phrase\n  else\n    List.iter (fun s -> Buffer.add_string result (s ^ \" \")) phrase\ndone;\nprint_string (Buffer.contents result)"]}
{"input": "repeat with logic:\nSay the days of the week but only the weekend days, two times", "target": "Saturday Sunday Saturday Sunday", "answer": "Saturday Sunday Saturday Sunday", "score": 1, "generation": ["(* Q: Say the days of the week but only the weekend days, two times *)\nlet weekend_days = [\"Saturday\"; \"Sunday\"] in\nlet result = Buffer.create 100 in\nfor _ = 1 to 2 do\n  List.iter (fun day -> Buffer.add_string result (day ^ \" \")) weekend_days;\ndone;\nprint_string (Buffer.contents result)"]}
{"input": "repeat with logic:\nSay the botanical gardens are five times. If the time divides evenly by two add beautiful, or by three add wonderful. Otherwise say great.", "target": "the botanical gardens are great the botanical gardens are beautiful the botanical gardens are wonderful the botanical gardens are beautiful the botanical gardens are great", "answer": "the botanical gardens are great the botanical gardens are beautiful the botanical gardens are wonderful the botanical gardens are beautiful the botanical gardens are great", "score": 1, "generation": ["(* Q: repeat with logic: Say the botanical gardens are five times. If the time divides evenly by two add beautiful, or by three add wonderful. Otherwise say great. *)\nlet result = Buffer.create 100 in\nfor i = 1 to 5 do\n  Buffer.add_string result \"the botanical gardens are \";\n  if i mod 2 = 0 then\n    Buffer.add_string result \"beautiful \"\n  else if i mod 3 = 0 then\n    Buffer.add_string result \"wonderful \"\n  else\n    Buffer.add_string result \"great \"\ndone;\nprint_string (Buffer.contents result)"]}
